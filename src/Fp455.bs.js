// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var BlueimpMd5 = require("blueimp-md5");

function isNumber(c) {
  if (48 <= c) {
    return c <= 57;
  } else {
    return false;
  }
}

function isLowerCase(c) {
  if (97 <= c) {
    return c <= 122;
  } else {
    return false;
  }
}

function getTruncatedAndRulerTuple(param, len) {
  var hmd5_2 = param[1];
  return /* tuple */[
          $$String.sub(param[0], 0, len),
          (function (param) {
              var rule = hmd5_2;
              var index = param;
              return $$String.contains("sunlovesnow1990090127xykab", Caml_string.get(rule, index));
            })
        ];
}

function calculate(pass, key, len) {
  var __ocaml_internal_obj = BlueimpMd5(pass, key);
  var param = getTruncatedAndRulerTuple(/* tuple */[
        BlueimpMd5(__ocaml_internal_obj, "snow"),
        BlueimpMd5(__ocaml_internal_obj, "kise")
      ], len);
  var matchRuleAtIndex = param[1];
  return $$String.mapi((function (i, ch) {
                if (i !== 0) {
                  if (isLowerCase(ch) && Curry._1(matchRuleAtIndex, i)) {
                    return Char.uppercase(ch);
                  } else {
                    return ch;
                  }
                } else {
                  var match = isNumber(ch);
                  if (match) {
                    return /* "K" */75;
                  } else {
                    return ch;
                  }
                }
              }), param[0]);
}

exports.calculate = calculate;
/* blueimp-md5 Not a pure module */
