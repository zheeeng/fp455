// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Process = require("process");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Fp455$Fp455 = require("./Fp455.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Argument_required = Caml_exceptions.create("Main-Fp455.Argument_required");

var Invalid_string_int = Caml_exceptions.create("Main-Fp455.Invalid_string_int");

function main() {
  var pass;
  try {
    pass = Caml_array.caml_array_get(Process.argv, 2);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      throw [
            Argument_required,
            "Need a password as the first argument!"
          ];
    } else {
      throw exn;
    }
  }
  var key;
  try {
    key = Caml_array.caml_array_get(Process.argv, 3);
  }
  catch (raw_exn$1){
    var exn$1 = Js_exn.internalToOCamlException(raw_exn$1);
    if (exn$1[0] === Caml_builtin_exceptions.invalid_argument) {
      throw [
            Argument_required,
            "Need a secret key as the seconed argument!"
          ];
    } else {
      throw exn$1;
    }
  }
  var len;
  try {
    len = Caml_format.caml_int_of_string(Caml_array.caml_array_get(Process.argv, 4));
  }
  catch (raw_exn$2){
    var exn$2 = Js_exn.internalToOCamlException(raw_exn$2);
    if (exn$2[0] === Caml_builtin_exceptions.invalid_argument) {
      len = 16;
    } else {
      throw [
            Invalid_string_int,
            "The length must be an integer!"
          ];
    }
  }
  if (len <= 0 || len > 32) {
    throw [
          Invalid_string_int,
          "The length must be in range(1, 32)!"
        ];
  }
  var finallyPass = Fp455$Fp455.calculate(pass, key, len);
  console.log(finallyPass);
  return /* () */0;
}

try {
  main(/* () */0);
}
catch (raw_exn){
  var exn = Js_exn.internalToOCamlException(raw_exn);
  if (exn[0] === Argument_required) {
    console.log(exn[1]);
  } else if (exn[0] === Invalid_string_int) {
    console.log(exn[1]);
  } else {
    console.log("unexpected error happens.");
  }
}

exports.Argument_required = Argument_required;
exports.Invalid_string_int = Invalid_string_int;
exports.main = main;
/*  Not a pure module */
